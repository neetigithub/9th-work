# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15bdIlStCTzMDsWQTkuJvXKnAEKLfUgLY
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import cross_val_score
import random
import matplotlib.pyplot as plt
from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVR
import matplotlib.pyplot as plt

urls = {'normal':"https://raw.githubusercontent.com/saranshtaneja/genetic_major/master/fb_dataset.csv",
        'ga':'https://raw.githubusercontent.com/manan-arya/Major_Project/pso%2B/after_ga.csv',
        'pso':'https://raw.githubusercontent.com/manan-arya/Major_Project/pso%2B/after_pso.csv',
        'bat':'https://raw.githubusercontent.com/manan-arya/Major_Project/pso%2B/after_bat.csv',
        'dragon':'https://raw.githubusercontent.com/manan-arya/Major_Project/pso%2B/after_dragon.csv'}
for name, url in urls.items():
  data = pd.read_csv(url)
  y_train = data.iloc[0:,data.shape[1]-1].values
  x_train = data.iloc[0:,:data.shape[1]-1].values
  parameters = {'epsilon':[0,2], 'C':[1, 1000]}
  sc_x=StandardScaler()
  sc_y=StandardScaler()
  x=sc_x.fit_transform(x_train)
  y=sc_y.fit_transform(y_train.reshape(-1,1))
  y=y.ravel()
  svr = SVR(kernel='rbf',C = 10000)
  clf = GridSearchCV(svr, parameters)
  clf.fit(x, y)
  GridSearchCV(estimator=svr,
              param_grid={'C': [1, 10000], 'epsilon': [0,2]})
  score = np.mean(cross_val_score(svr, x, y,  cv=5,  scoring=None))
  print(str(name)+' '+str(score))

urls = {'normal':"https://raw.githubusercontent.com/saranshtaneja/genetic_major/master/fb_dataset.csv",
        'ga':'https://raw.githubusercontent.com/manan-arya/Major_Project/pso%2B/after_ga.csv',
        'pso':'https://raw.githubusercontent.com/manan-arya/Major_Project/pso%2B/after_pso.csv',
        'bat':'https://raw.githubusercontent.com/manan-arya/Major_Project/pso%2B/after_bat.csv',
        'dragonfly':'https://raw.githubusercontent.com/manan-arya/Major_Project/pso%2B/after_dragon.csv'}
plt_x = []
plt_y = []
tick_label = []
for name, url in urls.items():
  data = pd.read_csv(url)
  y = data.iloc[0:,data.shape[1]-1].values
  X = data.iloc[0:,:data.shape[1]-1].values
  sc_x=StandardScaler()
  sc_y=StandardScaler()
  X=sc_x.fit_transform(X)
  y=sc_y.fit_transform(y.reshape(-1,1))
  y=y.ravel()
  svm = SVR(kernel='rbf',C = 10000)
  #clf = GridSearchCV(svr, parameters)
  #clf.fit(x, y)
  #GridSearchCV(estimator=svr,
  #            param_grid={'C': [1, 10000], 'epsilon': [0,2]})
  #score = np.mean(cross_val_score(svr, x, y,  cv=5,  scoring=None))
  from sklearn.model_selection import train_test_split
  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)
  svm = svm.fit(X_train, y_train)
  score = svm.score(X_test,y_test)
  print(str(name)+' '+str(score)+' features: '+str(data.shape[1]))
  plt_x.append(data.shape[1])
  plt_y.append(score)
  tick_label.append(name)

plt.bar(plt_x, plt_y, tick_label=tick_label,
        width=76, color=['orange', 'green'])
plt.xlabel("Features")
plt.ylabel("Score")
plt.show()



urls = {'normal':"https://raw.githubusercontent.com/saranshtaneja/genetic_major/master/fb_dataset.csv",
        'ga':'https://raw.githubusercontent.com/manan-arya/Major_Project/pso%2B/after_ga.csv',
        'pso':'https://raw.githubusercontent.com/manan-arya/Major_Project/pso%2B/after_pso.csv',
        'bat':'https://raw.githubusercontent.com/manan-arya/Major_Project/pso%2B/after_bat.csv',
        'dragon':'https://raw.githubusercontent.com/manan-arya/Major_Project/pso%2B/after_dragon.csv'}
for name, url in urls.items():
  data = pd.read_csv(url)
  y = data.iloc[0:,data.shape[1]-1].values
  X = data.iloc[0:,:data.shape[1]-1].values
  sc_x=StandardScaler()
  sc_y=StandardScaler()
  x=sc_x.fit_transform(X)
  y=sc_y.fit_transform(y.reshape(-1,1))
  y=y.ravel()
  svm = SVR(kernel='rbf',C = 10000)
  #clf = GridSearchCV(svr, parameters)
  #clf.fit(x, y)
  #GridSearchCV(estimator=svr,
  #            param_grid={'C': [1, 10000], 'epsilon': [0,2]})
  #score = np.mean(cross_val_score(svr, x, y,  cv=5,  scoring=None))
  from sklearn.model_selection import train_test_split
  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33, random_state=42)
  svm = svm.fit(X_train, y_train)
  score = svm.score(X_test,y_test)
  print(str(name)+' '+str(score)+' features: '+str(data.shape[1]))